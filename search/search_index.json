{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Currently in Beta Since ColorAide is now in beta, ColorAide Extra is also in beta! Experimental Plugins provided by ColorAide Extras is essentially an experimental playground. Regardless of how polished a given plugin may seem, they should be considered experimental. Overview ColorAide Extras is an add-on pack containing various plugins for ColorAide . The idea behind ColorAide Extras is to provide an environment for experimental color spaces, \u2206E methods, and other plugins. Installation The recommended way to install ColorAide Extras is to use pip : $ pip install coloraide_extras Usage Normally, it is advisable to only cherry pick color spaces you need. Rarely do people need every color space. This can be done simply by registering the color spaces you'd like. from coloraide_extras import Color Color('color(--ucs 0.27493 0.21264 0.12243 / 1)') But, if you want access to all the color spaces for both ColorAide and ColorAide Extras, simply import Color from coloraide_extras instead of coloraide : from coloraide import Color as Base from coloraide_extras import UCS class Color(Base): ... Color.register(UCS) Color('red').convert('ucs')","title":"Introduction"},{"location":"#introduction","text":"Currently in Beta Since ColorAide is now in beta, ColorAide Extra is also in beta! Experimental Plugins provided by ColorAide Extras is essentially an experimental playground. Regardless of how polished a given plugin may seem, they should be considered experimental.","title":"Introduction"},{"location":"#overview","text":"ColorAide Extras is an add-on pack containing various plugins for ColorAide . The idea behind ColorAide Extras is to provide an environment for experimental color spaces, \u2206E methods, and other plugins.","title":"Overview"},{"location":"#installation","text":"The recommended way to install ColorAide Extras is to use pip : $ pip install coloraide_extras","title":"Installation"},{"location":"#usage","text":"Normally, it is advisable to only cherry pick color spaces you need. Rarely do people need every color space. This can be done simply by registering the color spaces you'd like. from coloraide_extras import Color Color('color(--ucs 0.27493 0.21264 0.12243 / 1)') But, if you want access to all the color spaces for both ColorAide and ColorAide Extras, simply import Color from coloraide_extras instead of coloraide : from coloraide import Color as Base from coloraide_extras import UCS class Color(Base): ... Color.register(UCS) Color('red').convert('ucs')","title":"Usage"},{"location":"contrast/","text":"Contrast ColorAide provides WCAG 2.1 color contrast by default, but there are some criticisms related to how well the WCAG 2.1 algorithm performs. This is not a failing of ColorAide, but the contrast algorithm in general. ColorAide Extras currently provides a few color contrast methods for evaluating other approaches. Methods Symmetrical Description weber Contrast that uses the measure also referred to as Weber fraction. michelson Peak-to-peak contrast. Weber Contrast Weber contrast is commonly used in cases where small features are present on a large uniform background, i.e., where the average luminance is approximately equal to the background luminance. The algorithm takes the difference of the luminance and divides it by the lesser value. \\[ \\frac{L_{max} - L_{min}}{L_{min}} \\] Color('red').contrast('blue', method='weber') Michelson Contrast Michelson contrast (also known as the visibility) is commonly used for patterns where both bright and dark features are equivalent and take up similar fractions of the area (e.g. sine-wave gratings). It measures the relation between the spread and the sum of the two luminances. \\[ \\frac{L_{max} - L_{min}}{L_{max} + L_{min}} \\] Color('red').contrast('blue', method='weber')","title":"Color Contrast"},{"location":"contrast/#contrast","text":"ColorAide provides WCAG 2.1 color contrast by default, but there are some criticisms related to how well the WCAG 2.1 algorithm performs. This is not a failing of ColorAide, but the contrast algorithm in general. ColorAide Extras currently provides a few color contrast methods for evaluating other approaches. Methods Symmetrical Description weber Contrast that uses the measure also referred to as Weber fraction. michelson Peak-to-peak contrast.","title":"Contrast"},{"location":"contrast/#weber-contrast","text":"Weber contrast is commonly used in cases where small features are present on a large uniform background, i.e., where the average luminance is approximately equal to the background luminance. The algorithm takes the difference of the luminance and divides it by the lesser value. \\[ \\frac{L_{max} - L_{min}}{L_{min}} \\] Color('red').contrast('blue', method='weber')","title":"Weber Contrast"},{"location":"contrast/#michelson-contrast","text":"Michelson contrast (also known as the visibility) is commonly used for patterns where both bright and dark features are equivalent and take up similar fractions of the area (e.g. sine-wave gratings). It measures the relation between the spread and the sum of the two luminances. \\[ \\frac{L_{max} - L_{min}}{L_{max} + L_{min}} \\] Color('red').contrast('blue', method='weber')","title":"Michelson Contrast"},{"location":"distance/","text":"Color Distance and Delta E ColorAide Extras not only includes some experimental color spaces, but includes some associated \u2206E methods as well. CAM16 The CAM16 UCS color space is perceptually uniform. Part of the reason for its creation is to help improve color distancing. CAM02, which CAM16 is based off of and meant to improve, specified 3 color spaces: UCS, LCD, and SCD. LCD and SCD are particular for large scale and small scale color differencing respectively. Our implementation of CAM16 also implements UCS, LCD and SCD color spaces and provides a color distancing method called cam16 which utilizes the aforementioned color spaces. By default the method utilizes the CAM16 UCS color space, but if magnitude is specified with either lcd or scd , the appropriate CAM16 LCD or CAM16 SCD color space will be used instead (assuming all required color spaces are registered). Color('red').delta_e('blue', method='cam16') Color('red').delta_e('blue', method='cam16', magnitude='scd') Color('red').delta_e('blue', method='cam16', magnitude='lcd')","title":"Color Distance and Delta E"},{"location":"distance/#color-distance-and-delta-e","text":"ColorAide Extras not only includes some experimental color spaces, but includes some associated \u2206E methods as well.","title":"Color Distance and Delta E"},{"location":"distance/#cam16","text":"The CAM16 UCS color space is perceptually uniform. Part of the reason for its creation is to help improve color distancing. CAM02, which CAM16 is based off of and meant to improve, specified 3 color spaces: UCS, LCD, and SCD. LCD and SCD are particular for large scale and small scale color differencing respectively. Our implementation of CAM16 also implements UCS, LCD and SCD color spaces and provides a color distancing method called cam16 which utilizes the aforementioned color spaces. By default the method utilizes the CAM16 UCS color space, but if magnitude is specified with either lcd or scd , the appropriate CAM16 LCD or CAM16 SCD color space will be used instead (assuming all required color spaces are registered). Color('red').delta_e('blue', method='cam16') Color('red').delta_e('blue', method='cam16', magnitude='scd') Color('red').delta_e('blue', method='cam16', magnitude='lcd')","title":"CAM16"},{"location":"playground/","text":"Notebook Submit Cancel","title":"Playground"},{"location":"about/changelog/","text":"Changelog 1.0b1 NEW : Add support for new ColorAide 1.0 Beta. NEW : All previous color spaces except UCS and UVW have been moved to ColorAide 1.0 Beta. NEW : Added CAM16 UCS, CAM16 LCD, and CAM16 SCD and an associated cam16 \u2206E. NEW : Added Weber contrast and Michelson contrast. 0.5.1 FIX : Fix Hunter Lab values. 0.5.0 NEW : Update to support ColorAide 0.16.0 changes. 0.4.0 NEW : Added oRGB color space. 0.3.0 NEW : Updated to work with ColorAide 0.15.0 (now the required minimum) as there were substantial changes. NEW : Added support for RLAB color space. 0.2.0 NEW : Updated to work with latest ColorAide. FIX : IPT and IgPgTg mismatched channel association ( p <=> t ). This also broke round trip conversions. 0.1.2 FIX : Fix UVW calculation when u = v = w = 0 . 0.1.1 FIX : Fix some divide by zero cases in some of the color spaces. FIX : Fix CMYK logic. 0.1.0 NEW : Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#10b1","text":"NEW : Add support for new ColorAide 1.0 Beta. NEW : All previous color spaces except UCS and UVW have been moved to ColorAide 1.0 Beta. NEW : Added CAM16 UCS, CAM16 LCD, and CAM16 SCD and an associated cam16 \u2206E. NEW : Added Weber contrast and Michelson contrast.","title":"1.0b1"},{"location":"about/changelog/#051","text":"FIX : Fix Hunter Lab values.","title":"0.5.1"},{"location":"about/changelog/#050","text":"NEW : Update to support ColorAide 0.16.0 changes.","title":"0.5.0"},{"location":"about/changelog/#040","text":"NEW : Added oRGB color space.","title":"0.4.0"},{"location":"about/changelog/#030","text":"NEW : Updated to work with ColorAide 0.15.0 (now the required minimum) as there were substantial changes. NEW : Added support for RLAB color space.","title":"0.3.0"},{"location":"about/changelog/#020","text":"NEW : Updated to work with latest ColorAide. FIX : IPT and IgPgTg mismatched channel association ( p <=> t ). This also broke round trip conversions.","title":"0.2.0"},{"location":"about/changelog/#012","text":"FIX : Fix UVW calculation when u = v = w = 0 .","title":"0.1.2"},{"location":"about/changelog/#011","text":"FIX : Fix some divide by zero cases in some of the color spaces. FIX : Fix CMYK logic.","title":"0.1.1"},{"location":"about/changelog/#010","text":"NEW : Initial release.","title":"0.1.0"},{"location":"about/contributing/","text":"Contributing & Support There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of! Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out. Pull Requests Pull requests are welcome, and a great way to help fix bugs and add new features. Documentation Improvements A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of!","title":"Contributing &amp; Support"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Documentation Improvements"},{"location":"about/license/","text":"License MIT License Copyright \u00a9 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"colors/","text":"Supported Color Spaces ColorAide Extras adds a number of additional color spaces to ColorAide. Some are just spaces that are less practical to use for common cases, some are just interesting for specific applications, some are implemented just for history, and some are fairly new and a bit experimental. CIE 1960 UCS Properties Name: ucs White Point: D65 Coordinates: Name Range u [0.0, 0.634] * v [0.0, 1.0] * w [0.0, 1.569] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the CIE 1960 UCS color space. The CIE 1960 color space (\"CIE 1960 UCS\", variously expanded Uniform Color Space, Uniform Color Scale, Uniform Chromaticity Scale, Uniform Chromaticity Space) is another name for the (u, v) chromaticity space devised by David MacAdam. The color space is implemented using the relation between this space and the XYZ space as coordinates U, V, and W. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ucs : color ( --ucs u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ucs u v w / a ) form. Color(\"ucs\", [0, 0, 0], 1) Color(\"ucs\", [0, 0, 0], 1).to_string() CIE 1964 UVW Properties Name: uvw White Point: D65 Coordinates: Name Range u [-82.154, 171.8] * v [-87.173, 70.825] * w [-17.0, 99.04] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the UVW color space. Note It is a bit uncertain as to why the 3D model shows a number of values resolving to a black bulb under the shape, but the translation as been compared against some other libraries that have implemented the space, and it seems to align . Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier by Ladd and Pinney, and Glasser et al.. The chromaticity components U* and V* are defined such that the white point maps to the origin, as in Adams chromatic valence color spaces. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UVW space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --uvw : color ( --uvw u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --uvw u v w / a ) form. Color(\"uvw\", [0, 0, 0], 1) Color(\"uvw\", [0, 0, 0], 1).to_string() CAM16 UCS Properties Name: cam16-ucs White Point: D65 Coordinates: Name Range j [0, 100] a [-100, 100] b [-100, 100] The sRGB gamut represented within the CAM16 UCS color space. A color appearance model (CAM) is a mathematical model that seeks to describe the perceptual aspects of human color vision, i.e. viewing conditions under which the appearance of a color does not tally with the corresponding physical measurement of the stimulus source. The CAM16 is a successor of CIECAM02 with various fixes and improvements. It also comes with a color space called CAM16-UCS. It is published by a CIE workgroup, but is not yet a CIE standard. Because CIECAM16 UCS is a perceptually uniform color space, color distancing can use Euclidean distancing as a base. For the sake of color difference, two other spaces called CAM16 LCD and CAM16 SCD are also included for large scale and small scale color differencing. They are available as cam16-lcd and cam16-scd . Learn more . ColorAide Details Channel Aliases: Channels Aliases j lightness a b Inputs The CAM16 UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cam16-ucs : color ( --cam16-ucs j a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cam16-ucs u v w / a ) form. Color(\"cam16-ucs\", [0, 0, 0], 1) Color(\"cam16-ucs\", [0, 0, 0], 1).to_string() .info-container {display: inline-block;}","title":"Supported Colors"},{"location":"colors/#supported-color-spaces","text":"ColorAide Extras adds a number of additional color spaces to ColorAide. Some are just spaces that are less practical to use for common cases, some are just interesting for specific applications, some are implemented just for history, and some are fairly new and a bit experimental.","title":"Supported Color Spaces"},{"location":"colors/#cie-1960-ucs","text":"Properties Name: ucs White Point: D65 Coordinates: Name Range u [0.0, 0.634] * v [0.0, 1.0] * w [0.0, 1.569] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the CIE 1960 UCS color space. The CIE 1960 color space (\"CIE 1960 UCS\", variously expanded Uniform Color Space, Uniform Color Scale, Uniform Chromaticity Scale, Uniform Chromaticity Space) is another name for the (u, v) chromaticity space devised by David MacAdam. The color space is implemented using the relation between this space and the XYZ space as coordinates U, V, and W. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ucs : color ( --ucs u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ucs u v w / a ) form. Color(\"ucs\", [0, 0, 0], 1) Color(\"ucs\", [0, 0, 0], 1).to_string()","title":"CIE 1960 UCS"},{"location":"colors/#cie-1964-uvw","text":"Properties Name: uvw White Point: D65 Coordinates: Name Range u [-82.154, 171.8] * v [-87.173, 70.825] * w [-17.0, 99.04] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the UVW color space. Note It is a bit uncertain as to why the 3D model shows a number of values resolving to a black bulb under the shape, but the translation as been compared against some other libraries that have implemented the space, and it seems to align . Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier by Ladd and Pinney, and Glasser et al.. The chromaticity components U* and V* are defined such that the white point maps to the origin, as in Adams chromatic valence color spaces. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UVW space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --uvw : color ( --uvw u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --uvw u v w / a ) form. Color(\"uvw\", [0, 0, 0], 1) Color(\"uvw\", [0, 0, 0], 1).to_string()","title":"CIE 1964 UVW"},{"location":"colors/#cam16-ucs","text":"Properties Name: cam16-ucs White Point: D65 Coordinates: Name Range j [0, 100] a [-100, 100] b [-100, 100] The sRGB gamut represented within the CAM16 UCS color space. A color appearance model (CAM) is a mathematical model that seeks to describe the perceptual aspects of human color vision, i.e. viewing conditions under which the appearance of a color does not tally with the corresponding physical measurement of the stimulus source. The CAM16 is a successor of CIECAM02 with various fixes and improvements. It also comes with a color space called CAM16-UCS. It is published by a CIE workgroup, but is not yet a CIE standard. Because CIECAM16 UCS is a perceptually uniform color space, color distancing can use Euclidean distancing as a base. For the sake of color difference, two other spaces called CAM16 LCD and CAM16 SCD are also included for large scale and small scale color differencing. They are available as cam16-lcd and cam16-scd . Learn more . ColorAide Details Channel Aliases: Channels Aliases j lightness a b Inputs The CAM16 UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cam16-ucs : color ( --cam16-ucs j a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cam16-ucs u v w / a ) form. Color(\"cam16-ucs\", [0, 0, 0], 1) Color(\"cam16-ucs\", [0, 0, 0], 1).to_string() .info-container {display: inline-block;}","title":"CAM16 UCS"}]}