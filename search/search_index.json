{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Currently a Prerelease Like ColorAide , ColorAide Extras is very usable and out of the alpha stage, but it is currently in a prerelease state. This simply means that the API of ColorAide is still in flux to some degree and could affect this package. ColorAide Extras is an add-on pack containing various plugins for ColorAide . ColorAide only ships with a select number of color spaces, \u2206E methods, and gamut mapping alternatives. ColorAide Extras allows us to offer an additional number of uncommon and/or experimental set of color spaces and other plugins. Installation The recommended way to install ColorAide Extras is to use pip : $ pip install coloraide_extras Usage If you want access to all the color spaces for both ColorAide and ColorAide Extras, simply import Color from coloraide_extras instead of coloraide : >>> from coloraide_extras import Color >>> Color ( 'color(--hunter-lab 46.113 82.694 28.337 / 1)' ) color(--hunter-lab 46.113 82.694 28.337 / 1) from coloraide_extras import Color Color('color(--hunter-lab 46.113 82.694 28.337 / 1)') Edit Share Run Cancel If you'd like to only grab a few, simply subclass Color from coloraide and register the additional plugins that you desire: >>> from coloraide import Color as Base >>> from coloraide_extras.spaces.hunter_lab import HunterLab >>> class Color ( Base ): ... ... >>> Color . register ( HunterLab ) >>> Color ( 'red' ) . convert ( 'hunter-lab' ) color(--hunter-lab 46.113 82.672 28.408 / 1) from coloraide import Color as Base from coloraide_extras.spaces.hunter_lab import HunterLab class Color(Base): ... Color.register(HunterLab) Color('red').convert('hunter-lab') Edit Share Run Cancel","title":"Introduction"},{"location":"#introduction","text":"Currently a Prerelease Like ColorAide , ColorAide Extras is very usable and out of the alpha stage, but it is currently in a prerelease state. This simply means that the API of ColorAide is still in flux to some degree and could affect this package. ColorAide Extras is an add-on pack containing various plugins for ColorAide . ColorAide only ships with a select number of color spaces, \u2206E methods, and gamut mapping alternatives. ColorAide Extras allows us to offer an additional number of uncommon and/or experimental set of color spaces and other plugins.","title":"Introduction"},{"location":"#installation","text":"The recommended way to install ColorAide Extras is to use pip : $ pip install coloraide_extras","title":"Installation"},{"location":"#usage","text":"If you want access to all the color spaces for both ColorAide and ColorAide Extras, simply import Color from coloraide_extras instead of coloraide : >>> from coloraide_extras import Color >>> Color ( 'color(--hunter-lab 46.113 82.694 28.337 / 1)' ) color(--hunter-lab 46.113 82.694 28.337 / 1) from coloraide_extras import Color Color('color(--hunter-lab 46.113 82.694 28.337 / 1)') Edit Share Run Cancel If you'd like to only grab a few, simply subclass Color from coloraide and register the additional plugins that you desire: >>> from coloraide import Color as Base >>> from coloraide_extras.spaces.hunter_lab import HunterLab >>> class Color ( Base ): ... ... >>> Color . register ( HunterLab ) >>> Color ( 'red' ) . convert ( 'hunter-lab' ) color(--hunter-lab 46.113 82.672 28.408 / 1) from coloraide import Color as Base from coloraide_extras.spaces.hunter_lab import HunterLab class Color(Base): ... Color.register(HunterLab) Color('red').convert('hunter-lab') Edit Share Run Cancel","title":"Usage"},{"location":"playground/","text":"Notebook Submit Cancel","title":"Playground"},{"location":"about/changelog/","text":"Changelog 0.5.1 FIX : Fix Hunter Lab values. 0.5.0 NEW : Update to support ColorAide 0.16.0 changes. 0.4.0 NEW : Added oRGB color space. 0.3.0 NEW : Updated to work with ColorAide 0.15.0 (now the required minimum) as there were substantial changes. NEW : Added support for RLAB color space. 0.2.0 NEW : Updated to work with latest ColorAide. FIX : IPT and IgPgTg mismatched channel association ( p <=> t ). This also broke round trip conversions. 0.1.2 FIX : Fix UVW calculation when u = v = w = 0 . 0.1.1 FIX : Fix some divide by zero cases in some of the color spaces. FIX : Fix CMYK logic. 0.1.0 NEW : Initial release.","title":"Changelog"},{"location":"about/changelog/#changelog","text":"","title":"Changelog"},{"location":"about/changelog/#051","text":"FIX : Fix Hunter Lab values.","title":"0.5.1"},{"location":"about/changelog/#050","text":"NEW : Update to support ColorAide 0.16.0 changes.","title":"0.5.0"},{"location":"about/changelog/#040","text":"NEW : Added oRGB color space.","title":"0.4.0"},{"location":"about/changelog/#030","text":"NEW : Updated to work with ColorAide 0.15.0 (now the required minimum) as there were substantial changes. NEW : Added support for RLAB color space.","title":"0.3.0"},{"location":"about/changelog/#020","text":"NEW : Updated to work with latest ColorAide. FIX : IPT and IgPgTg mismatched channel association ( p <=> t ). This also broke round trip conversions.","title":"0.2.0"},{"location":"about/changelog/#012","text":"FIX : Fix UVW calculation when u = v = w = 0 .","title":"0.1.2"},{"location":"about/changelog/#011","text":"FIX : Fix some divide by zero cases in some of the color spaces. FIX : Fix CMYK logic.","title":"0.1.1"},{"location":"about/changelog/#010","text":"NEW : Initial release.","title":"0.1.0"},{"location":"about/contributing/","text":"Contributing & Support There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of! Become a Sponsor Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal Bug Reports Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed. Reviewing Code Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm. Answer Questions in Issues Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out. Pull Requests Pull requests are welcome, and a great way to help fix bugs and add new features. Documentation Improvements A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Contributing &amp; Support"},{"location":"about/contributing/#contributing--support","text":"There are many ways to help support this project, regardless of skills and abilities. If you enjoy this project and want to get involved, consider checking out one of the various ways below. Feel free to get creative, there may be other ways to contribute in which we have not thought of!","title":"Contributing &amp; Support"},{"location":"about/contributing/#become-a-sponsor","text":"Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal. GitHub Sponsors PayPal","title":"Become a Sponsor "},{"location":"about/contributing/#bug-reports","text":"Please read the documentation and search the issue tracker to try and find the answer to your question before posting an issue. When creating an issue on the repository, please provide as much info as possible: Version being used. Operating system. Version of Python. Errors in console. Detailed description of the problem. Examples for reproducing the error. You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste. The more info provided, the greater the chance someone will take the time to answer, implement, or fix the issue. Be prepared to answer questions and provide additional information if required. Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.","title":"Bug Reports"},{"location":"about/contributing/#reviewing-code","text":"Take part in reviewing pull requests and/or reviewing direct commits. Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.","title":"Reviewing Code"},{"location":"about/contributing/#answer-questions-in-issues","text":"Take time and answer questions and offer suggestions to people who've created issues in the issue tracker. Often people will have questions that you might have an answer for. Or maybe you know how to help them accomplish a specific task they are asking about. Feel free to share your experience to help others out.","title":"Answer Questions in Issues"},{"location":"about/contributing/#pull-requests","text":"Pull requests are welcome, and a great way to help fix bugs and add new features.","title":"Pull Requests"},{"location":"about/contributing/#documentation-improvements","text":"A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.","title":"Documentation Improvements"},{"location":"about/license/","text":"License MIT License Copyright \u00a9 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"MIT License Copyright \u00a9 2022 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"colors/","text":"Supported Color Spaces ColorAide Extras adds a number of additional color spaces to ColorAide. Some are just spaces that are less practical to use for common cases, some are just interesting for specific applications, some are implemented just for history, and some are fairly new and a bit experimental. CMY(K) CMY and CMYK are subtractive color models. The CMY color model itself does not define what is meant by cyan, magenta and yellow colorimetrically, and so the results of mixing them are not specified as absolute. As far as ColorAide Extra is concerned, it has defined its primaries the same as sRGB making it an absolute color space. There are many places in which CMY or CMYK are used, often in device dependent applications. CMYK is used in all sorts of printing applications, and the exact definition of cyan, magenta, yellow, and black will differ depending on how the device has implemented it. Unless they are calibrated to the sRGB color space primaries, it is almost certain this will not match such implementations. CMY Properties Name: cmy White Point: D65 Coordinates: Name Range c [0, 1] m [0, 1] y [0, 1] The sRGB gamut represented within the CMY color space. The CMY color model is a subtractive color model in which cyan, magenta and yellow pigments or dyes are added together in various ways to reproduce a broad array of colors. The name of the model comes from the initials of the three subtractive primary colors: cyan, magenta, and yellow. The CMY color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . ColorAide Details Channel Aliases: Channels Aliases c cyan m magenta y yellow Inputs CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmy : color ( --cmy c m y / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cmy c m y / a ) form. >>> Color ( \"cmy\" , [ 0 , 0 , 0 ], 1 ) color(--cmy 0 0 0 / 1) >>> Color ( \"cmy\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--cmy 0 0 0) Color(\"cmy\", [0, 0, 0], 1) Color(\"cmy\", [0, 0, 0], 1).to_string() Edit Share Run Cancel CMYK Properties Name: cmyk White Point: D65 Coordinates: Name Range c [0, 1] m [0, 1] y [0, 1] k [0, 1] The CMYK color model is a just like CMY except that it adds an additional channel k to control blackness. The CMYK color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . ColorAide Details Channel Aliases: Channels Aliases c cyan m magenta y yellow k black Inputs CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmyk : color ( --cmyk c m y k / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cmyk c m y k / a ) form. >>> Color ( \"cmyk\" , [ 0 , 0 , 0 , 0 ], 1 ) color(--cmyk 0 0 0 0 / 1) >>> Color ( \"cmyk\" , [ 0 , 0 , 0 , 0 ], 1 ) . to_string () color(--cmyk 0 0 0 0) Color(\"cmyk\", [0, 0, 0, 0], 1) Color(\"cmyk\", [0, 0, 0, 0], 1).to_string() Edit Share Run Cancel xyY Properties Name: xyy White Point: D65 Coordinates: Name Range x [0, 1] y [0, 1] Y [0, 1] The sRGB gamut represented within the xyY color space. A derivative of the CIE 1931 XYZ space, the CIE xyY color space, is often used as a way to graphically present the chromaticity of colors. Learn more . ColorAide Details Channel Aliases: Channels Aliases x y Y Inputs The xyY space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --xyy : color ( --xyy x y Y / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --xyy x y Y / a ) form. >>> Color ( \"xyy\" , [ 0 , 0 , 0 ], 1 ) color(--xyy 0 0 0 / 1) >>> Color ( \"xyy\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--xyy 0 0 0) Color(\"xyy\", [0, 0, 0], 1) Color(\"xyy\", [0, 0, 0], 1).to_string() Edit Share Run Cancel CIE 1960 UCS Properties Name: ucs White Point: D65 Coordinates: Name Range u [0.0, 0.634] * v [0.0, 1.0] * w [0.0, 1.569] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the CIE 1960 UCS color space. The CIE 1960 color space (\"CIE 1960 UCS\", variously expanded Uniform Color Space, Uniform Color Scale, Uniform Chromaticity Scale, Uniform Chromaticity Space) is another name for the (u, v) chromaticity space devised by David MacAdam. The color space is implemented using the relation between this space and the XYZ space as coordinates U, V, and W. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ucs : color ( --ucs u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ucs u v w / a ) form. >>> Color ( \"ucs\" , [ 0 , 0 , 0 ], 1 ) color(--ucs 0 0 0 / 1) >>> Color ( \"ucs\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--ucs 0 0 0) Color(\"ucs\", [0, 0, 0], 1) Color(\"ucs\", [0, 0, 0], 1).to_string() Edit Share Run Cancel CIE 1964 UVW Properties Name: uvw White Point: D65 Coordinates: Name Range u [-82.154, 171.8] * v [-87.173, 70.825] * w [-17.0, 99.04] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the UVW color space. Note It is a bit uncertain as to why the 3D model shows a number of values resolving to a black bulb under the shape, but the translation as been compared against some other libraries that have implemented the space, and it seems to align . Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier by Ladd and Pinney, and Glasser et al.. The chromaticity components U* and V* are defined such that the white point maps to the origin, as in Adams chromatic valence color spaces. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UVW space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --uvw : color ( --uvw u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --uvw u v w / a ) form. >>> Color ( \"uvw\" , [ 0 , 0 , 0 ], 1 ) color(--uvw 0 0 0 / 1) >>> Color ( \"uvw\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--uvw 0 0 0) Color(\"uvw\", [0, 0, 0], 1) Color(\"uvw\", [0, 0, 0], 1).to_string() Edit Share Run Cancel HSI Properties Name: hsi White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] i [0, 1] The sRGB gamut represented within the HSI color space. The HSI model is similar to models like HSL and HSV except that it uses I for intensity instead of Lightness or Value. It does not attempt to \"fill\" a cylinder by its definition of saturation leading to a very different look when we plot it. Learn more . ColorAide Details Channel Aliases: Channels Aliases h hue s saturation i intensity Inputs The HSI space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsi : color ( --hsi h s i / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --hsi h s i / a ) form. >>> Color ( \"hsi\" , [ 0 , 0 , 0 ], 1 ) color(--hsi 0 0 0 / 1) >>> Color ( \"hsi\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--hsi 0 0 0) Color(\"hsi\", [0, 0, 0], 1) Color(\"hsi\", [0, 0, 0], 1).to_string() Edit Share Run Cancel oRGB Properties Name: orgb White Point: D65 Coordinates: Name Range l [0, 1] cyb [-1, 1] crg [-1, 1] The sRGB gamut represented within the oRGB color space. A new color model that is based on opponent color theory. Like HSV, it is designed specifically for computer graphics. However, it is also designed to work well for computational applications such as color transfer, where HSV falters. Despite being geared towards computation, oRGB\u2019s natural axes facilitate HSV-style color selection and manipulation. oRGB also allows for new applications such as a quantitative cool-to-warm metric, intuitive color manipulations and variations, and simple gamut mapping. This new color model strikes a balance between simplicity and the computational qualities of color spaces such as CIELAB. Learn more . ColorAide Details Channel Aliases: Channels Aliases l luma cyb crb Inputs The oRGB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --orgb : color ( --orgb l cyb crb / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --orgb l cyb crg / a ) form. >>> Color ( \"orgb\" , [ 0 , 0 , 0 ], 1 ) color(--orgb 0 0 0 / 1) >>> Color ( \"orgb\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--orgb 0 0 0) Color(\"orgb\", [0, 0, 0], 1) Color(\"orgb\", [0, 0, 0], 1).to_string() Edit Share Run Cancel Prismatic Properties Name: prismatic White Point: D65 Coordinates: Name Range l [0, 1] r [0, 1] g [0, 1] b [0, 1] The sRGB gamut represented within the Prismatic color space. The Prismatic model introduces a simple transform of the RGB color cube into a light/dark dimension and a 2D hue. The hue is a normalized (barycentric)triangle with pure red, green, and blue at the vertices, often called the Maxwell Color Triangle. Each cross section of the space is the same barycentric triangle, and the light/dark dimension runs zero to one for each hue so the whole color volume takes the form of a prism. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness r red g green b blue Inputs The Prismatic space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --prismatic : color ( --prismatic l r g b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --prismatic l r g b / a ) form. >>> Color ( \"prismatic\" , [ 0 , 0 , 0 , 0 ], 1 ) color(--prismatic 0 0 0 0 / 1) >>> Color ( \"prismatic\" , [ 0 , 0 , 0 , 0 ], 1 ) . to_string () color(--prismatic 0 0 0 0) Color(\"prismatic\", [0, 0, 0, 0], 1) Color(\"prismatic\", [0, 0, 0, 0], 1).to_string() Edit Share Run Cancel Hunter Lab Properties Name: hunter-lab White Point: D65 Coordinates: Name Range l [0.0, 100.0] * a [-69.06, 109.43] * b [-200.288, 55.869] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the Hunter Lab color space. The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space referred to as \"Lab\". Like CIELAB, it was also designed to be computed via simple formulas from the CIEXYZ space, but to be more perceptually uniform than CIEXYZ. Hunter named his coordinates L, a, and b. The CIE named the coordinates for CIELAB as L , a , b* to distinguish them from Hunter's coordinates. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness a b Inputs The Hunter Lab space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hunter-lab : color ( --hunter-lab l a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --hunter-lab l a b / a ) form. >>> Color ( \"hunter-lab\" , [ 0 , 0 , 0 ], 1 ) color(--hunter-lab 0 0 0 / 1) >>> Color ( \"hunter-lab\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--hunter-lab 0 0 0) Color(\"hunter-lab\", [0, 0, 0], 1) Color(\"hunter-lab\", [0, 0, 0], 1).to_string() Edit Share Run Cancel RLAB Properties Name: rlab White Point: D65 Coordinates: Name Range l [0.0, 100.0] * a [-90.566, 101.151] * b [-106.018, 95.194] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the RLAB color space. The RLAB color-appearance space was developed by Fairchild and Berns for cross-media color reproduction applications in which images are reproduced with differing white points, luminance levels, and/or surrounds. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness a b Inputs The RLAB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --rlab : color ( --rlab l a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --rlab l a b / a ) form. >>> Color ( \"rlab\" , [ 0 , 0 , 0 ], 1 ) color(--rlab 0 0 0 / 1) >>> Color ( \"rlab\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--rlab 0 0 0) Color(\"rlab\", [0, 0, 0], 1) Color(\"rlab\", [0, 0, 0], 1).to_string() Edit Share Run Cancel IPT Properties Name: ipt White Point: D65 Coordinates: Name Range i [0.0, 1.0] * p [-0.453, 0.662] * t [-0.748, 0.651] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the IPT color space. Ebner and Fairchild addressed the issue of non-constant lines of hue in their color space dubbed IPT. The IPT color space converts D65-adapted XYZ data (XD65, YD65, ZD65) to long-medium-short cone response data (LMS) using an adapted form of the Hunt-Pointer-Estevez matrix (MHPE(D65)). The IPT color appearance model excels at providing a formulation for hue where a constant hue value equals a constant perceived hue independent of the values of lightness and chroma (which is the general ideal for any color appearance model, but hard to achieve). It is therefore well-suited for gamut mapping implementations. Learn more . ColorAide Details Channel Aliases: Channels Aliases i p t Inputs The IPT space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ipt : color ( --ipt i p t / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ipt i p t / a ) form. >>> Color ( \"ipt\" , [ 0 , 0 , 0 ], 1 ) color(--ipt 0 0 0 / 1) >>> Color ( \"ipt\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--ipt 0 0 0) Color(\"ipt\", [0, 0, 0], 1) Color(\"ipt\", [0, 0, 0], 1).to_string() Edit Share Run Cancel IgPgTg Properties Name: ipt White Point: D65 Coordinates: Name Range ig [0.0, 0.974] * pg [-0.354, 0.394] * tg [-0.412, 0.437] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the IgPgTg color space. IgPgTg uses the same structure as IPT, an established hue-uniform color space utilized in gamut mapping applications. While IPT was fit to visual data on the perceived hue, IGPGTG was optimized based on evidence linking the peak wavelength of Gaussian-shaped light spectra to their perceived hues. Learn more . ColorAide Details Channel Aliases: Channels Aliases ig pg tg Inputs The IgPgTg space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --igpgtg : color ( --igpgtg ig pg tg / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --igpgtg ig pg tg / a ) form. >>> Color ( \"igpgtg\" , [ 0 , 0 , 0 ], 1 ) color(--igpgtg 0 0 0 / 1) >>> Color ( \"igpgtg\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--igpgtg 0 0 0) Color(\"igpgtg\", [0, 0, 0], 1) Color(\"igpgtg\", [0, 0, 0], 1).to_string() Edit Share Run Cancel .info-container {display: inline-block;}","title":"Supported Colors"},{"location":"colors/#supported-color-spaces","text":"ColorAide Extras adds a number of additional color spaces to ColorAide. Some are just spaces that are less practical to use for common cases, some are just interesting for specific applications, some are implemented just for history, and some are fairly new and a bit experimental.","title":"Supported Color Spaces"},{"location":"colors/#cmyk","text":"CMY and CMYK are subtractive color models. The CMY color model itself does not define what is meant by cyan, magenta and yellow colorimetrically, and so the results of mixing them are not specified as absolute. As far as ColorAide Extra is concerned, it has defined its primaries the same as sRGB making it an absolute color space. There are many places in which CMY or CMYK are used, often in device dependent applications. CMYK is used in all sorts of printing applications, and the exact definition of cyan, magenta, yellow, and black will differ depending on how the device has implemented it. Unless they are calibrated to the sRGB color space primaries, it is almost certain this will not match such implementations.","title":"CMY(K)"},{"location":"colors/#cmy","text":"Properties Name: cmy White Point: D65 Coordinates: Name Range c [0, 1] m [0, 1] y [0, 1] The sRGB gamut represented within the CMY color space. The CMY color model is a subtractive color model in which cyan, magenta and yellow pigments or dyes are added together in various ways to reproduce a broad array of colors. The name of the model comes from the initials of the three subtractive primary colors: cyan, magenta, and yellow. The CMY color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . ColorAide Details Channel Aliases: Channels Aliases c cyan m magenta y yellow Inputs CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmy : color ( --cmy c m y / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cmy c m y / a ) form. >>> Color ( \"cmy\" , [ 0 , 0 , 0 ], 1 ) color(--cmy 0 0 0 / 1) >>> Color ( \"cmy\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--cmy 0 0 0) Color(\"cmy\", [0, 0, 0], 1) Color(\"cmy\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"CMY"},{"location":"colors/#cmyk_1","text":"Properties Name: cmyk White Point: D65 Coordinates: Name Range c [0, 1] m [0, 1] y [0, 1] k [0, 1] The CMYK color model is a just like CMY except that it adds an additional channel k to control blackness. The CMYK color space, as ColorAide Extras has chosen to implement it, is directly calculated from the sRGB color space, and as such, is based off the sRGB primaries. Learn more . ColorAide Details Channel Aliases: Channels Aliases c cyan m magenta y yellow k black Inputs CMY is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --cmyk : color ( --cmyk c m y k / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --cmyk c m y k / a ) form. >>> Color ( \"cmyk\" , [ 0 , 0 , 0 , 0 ], 1 ) color(--cmyk 0 0 0 0 / 1) >>> Color ( \"cmyk\" , [ 0 , 0 , 0 , 0 ], 1 ) . to_string () color(--cmyk 0 0 0 0) Color(\"cmyk\", [0, 0, 0, 0], 1) Color(\"cmyk\", [0, 0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"CMYK"},{"location":"colors/#xyy","text":"Properties Name: xyy White Point: D65 Coordinates: Name Range x [0, 1] y [0, 1] Y [0, 1] The sRGB gamut represented within the xyY color space. A derivative of the CIE 1931 XYZ space, the CIE xyY color space, is often used as a way to graphically present the chromaticity of colors. Learn more . ColorAide Details Channel Aliases: Channels Aliases x y Y Inputs The xyY space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --xyy : color ( --xyy x y Y / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --xyy x y Y / a ) form. >>> Color ( \"xyy\" , [ 0 , 0 , 0 ], 1 ) color(--xyy 0 0 0 / 1) >>> Color ( \"xyy\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--xyy 0 0 0) Color(\"xyy\", [0, 0, 0], 1) Color(\"xyy\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"xyY"},{"location":"colors/#cie-1960-ucs","text":"Properties Name: ucs White Point: D65 Coordinates: Name Range u [0.0, 0.634] * v [0.0, 1.0] * w [0.0, 1.569] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the CIE 1960 UCS color space. The CIE 1960 color space (\"CIE 1960 UCS\", variously expanded Uniform Color Space, Uniform Color Scale, Uniform Chromaticity Scale, Uniform Chromaticity Space) is another name for the (u, v) chromaticity space devised by David MacAdam. The color space is implemented using the relation between this space and the XYZ space as coordinates U, V, and W. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UCS space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ucs : color ( --ucs u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ucs u v w / a ) form. >>> Color ( \"ucs\" , [ 0 , 0 , 0 ], 1 ) color(--ucs 0 0 0 / 1) >>> Color ( \"ucs\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--ucs 0 0 0) Color(\"ucs\", [0, 0, 0], 1) Color(\"ucs\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"CIE 1960 UCS"},{"location":"colors/#cie-1964-uvw","text":"Properties Name: uvw White Point: D65 Coordinates: Name Range u [-82.154, 171.8] * v [-87.173, 70.825] * w [-17.0, 99.04] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the UVW color space. Note It is a bit uncertain as to why the 3D model shows a number of values resolving to a black bulb under the shape, but the translation as been compared against some other libraries that have implemented the space, and it seems to align . Wyszecki invented the UVW color space in order to be able to calculate color differences without having to hold the luminance constant. He defined a lightness index W* by simplifying expressions suggested earlier by Ladd and Pinney, and Glasser et al.. The chromaticity components U* and V* are defined such that the white point maps to the origin, as in Adams chromatic valence color spaces. Learn more . ColorAide Details Channel Aliases: Channels Aliases u v w Inputs The UVW space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --uvw : color ( --uvw u v w / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --uvw u v w / a ) form. >>> Color ( \"uvw\" , [ 0 , 0 , 0 ], 1 ) color(--uvw 0 0 0 / 1) >>> Color ( \"uvw\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--uvw 0 0 0) Color(\"uvw\", [0, 0, 0], 1) Color(\"uvw\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"CIE 1964 UVW"},{"location":"colors/#hsi","text":"Properties Name: hsi White Point: D65 Coordinates: Name Range h [0, 360) s [0, 1] i [0, 1] The sRGB gamut represented within the HSI color space. The HSI model is similar to models like HSL and HSV except that it uses I for intensity instead of Lightness or Value. It does not attempt to \"fill\" a cylinder by its definition of saturation leading to a very different look when we plot it. Learn more . ColorAide Details Channel Aliases: Channels Aliases h hue s saturation i intensity Inputs The HSI space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hsi : color ( --hsi h s i / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --hsi h s i / a ) form. >>> Color ( \"hsi\" , [ 0 , 0 , 0 ], 1 ) color(--hsi 0 0 0 / 1) >>> Color ( \"hsi\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--hsi 0 0 0) Color(\"hsi\", [0, 0, 0], 1) Color(\"hsi\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"HSI"},{"location":"colors/#orgb","text":"Properties Name: orgb White Point: D65 Coordinates: Name Range l [0, 1] cyb [-1, 1] crg [-1, 1] The sRGB gamut represented within the oRGB color space. A new color model that is based on opponent color theory. Like HSV, it is designed specifically for computer graphics. However, it is also designed to work well for computational applications such as color transfer, where HSV falters. Despite being geared towards computation, oRGB\u2019s natural axes facilitate HSV-style color selection and manipulation. oRGB also allows for new applications such as a quantitative cool-to-warm metric, intuitive color manipulations and variations, and simple gamut mapping. This new color model strikes a balance between simplicity and the computational qualities of color spaces such as CIELAB. Learn more . ColorAide Details Channel Aliases: Channels Aliases l luma cyb crb Inputs The oRGB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --orgb : color ( --orgb l cyb crb / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --orgb l cyb crg / a ) form. >>> Color ( \"orgb\" , [ 0 , 0 , 0 ], 1 ) color(--orgb 0 0 0 / 1) >>> Color ( \"orgb\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--orgb 0 0 0) Color(\"orgb\", [0, 0, 0], 1) Color(\"orgb\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"oRGB"},{"location":"colors/#prismatic","text":"Properties Name: prismatic White Point: D65 Coordinates: Name Range l [0, 1] r [0, 1] g [0, 1] b [0, 1] The sRGB gamut represented within the Prismatic color space. The Prismatic model introduces a simple transform of the RGB color cube into a light/dark dimension and a 2D hue. The hue is a normalized (barycentric)triangle with pure red, green, and blue at the vertices, often called the Maxwell Color Triangle. Each cross section of the space is the same barycentric triangle, and the light/dark dimension runs zero to one for each hue so the whole color volume takes the form of a prism. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness r red g green b blue Inputs The Prismatic space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --prismatic : color ( --prismatic l r g b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --prismatic l r g b / a ) form. >>> Color ( \"prismatic\" , [ 0 , 0 , 0 , 0 ], 1 ) color(--prismatic 0 0 0 0 / 1) >>> Color ( \"prismatic\" , [ 0 , 0 , 0 , 0 ], 1 ) . to_string () color(--prismatic 0 0 0 0) Color(\"prismatic\", [0, 0, 0, 0], 1) Color(\"prismatic\", [0, 0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"Prismatic"},{"location":"colors/#hunter-lab","text":"Properties Name: hunter-lab White Point: D65 Coordinates: Name Range l [0.0, 100.0] * a [-69.06, 109.43] * b [-200.288, 55.869] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the Hunter Lab color space. The Hunter Lab color space, defined in 1948 by Richard S. Hunter, is another color space referred to as \"Lab\". Like CIELAB, it was also designed to be computed via simple formulas from the CIEXYZ space, but to be more perceptually uniform than CIEXYZ. Hunter named his coordinates L, a, and b. The CIE named the coordinates for CIELAB as L , a , b* to distinguish them from Hunter's coordinates. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness a b Inputs The Hunter Lab space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --hunter-lab : color ( --hunter-lab l a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --hunter-lab l a b / a ) form. >>> Color ( \"hunter-lab\" , [ 0 , 0 , 0 ], 1 ) color(--hunter-lab 0 0 0 / 1) >>> Color ( \"hunter-lab\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--hunter-lab 0 0 0) Color(\"hunter-lab\", [0, 0, 0], 1) Color(\"hunter-lab\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"Hunter Lab"},{"location":"colors/#rlab","text":"Properties Name: rlab White Point: D65 Coordinates: Name Range l [0.0, 100.0] * a [-90.566, 101.151] * b [-106.018, 95.194] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the RLAB color space. The RLAB color-appearance space was developed by Fairchild and Berns for cross-media color reproduction applications in which images are reproduced with differing white points, luminance levels, and/or surrounds. Learn more . ColorAide Details Channel Aliases: Channels Aliases l lightness a b Inputs The RLAB space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --rlab : color ( --rlab l a b / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --rlab l a b / a ) form. >>> Color ( \"rlab\" , [ 0 , 0 , 0 ], 1 ) color(--rlab 0 0 0 / 1) >>> Color ( \"rlab\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--rlab 0 0 0) Color(\"rlab\", [0, 0, 0], 1) Color(\"rlab\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"RLAB"},{"location":"colors/#ipt","text":"Properties Name: ipt White Point: D65 Coordinates: Name Range i [0.0, 1.0] * p [-0.453, 0.662] * t [-0.748, 0.651] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the IPT color space. Ebner and Fairchild addressed the issue of non-constant lines of hue in their color space dubbed IPT. The IPT color space converts D65-adapted XYZ data (XD65, YD65, ZD65) to long-medium-short cone response data (LMS) using an adapted form of the Hunt-Pointer-Estevez matrix (MHPE(D65)). The IPT color appearance model excels at providing a formulation for hue where a constant hue value equals a constant perceived hue independent of the values of lightness and chroma (which is the general ideal for any color appearance model, but hard to achieve). It is therefore well-suited for gamut mapping implementations. Learn more . ColorAide Details Channel Aliases: Channels Aliases i p t Inputs The IPT space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --ipt : color ( --ipt i p t / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --ipt i p t / a ) form. >>> Color ( \"ipt\" , [ 0 , 0 , 0 ], 1 ) color(--ipt 0 0 0 / 1) >>> Color ( \"ipt\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--ipt 0 0 0) Color(\"ipt\", [0, 0, 0], 1) Color(\"ipt\", [0, 0, 0], 1).to_string() Edit Share Run Cancel","title":"IPT"},{"location":"colors/#igpgtg","text":"Properties Name: ipt White Point: D65 Coordinates: Name Range ig [0.0, 0.974] * pg [-0.354, 0.394] * tg [-0.412, 0.437] * * \u2248 range in relation to sRGB rounded to 3 decimal places. The sRGB gamut represented within the IgPgTg color space. IgPgTg uses the same structure as IPT, an established hue-uniform color space utilized in gamut mapping applications. While IPT was fit to visual data on the perceived hue, IGPGTG was optimized based on evidence linking the peak wavelength of Gaussian-shaped light spectra to their perceived hues. Learn more . ColorAide Details Channel Aliases: Channels Aliases ig pg tg Inputs The IgPgTg space is not currently supported in the CSS spec, the parsed input and string output formats use the color () function format using the custom name --igpgtg : color ( --igpgtg ig pg tg / a ) // Color function Output: The string representation of the color object and the default string output use the color ( --igpgtg ig pg tg / a ) form. >>> Color ( \"igpgtg\" , [ 0 , 0 , 0 ], 1 ) color(--igpgtg 0 0 0 / 1) >>> Color ( \"igpgtg\" , [ 0 , 0 , 0 ], 1 ) . to_string () color(--igpgtg 0 0 0) Color(\"igpgtg\", [0, 0, 0], 1) Color(\"igpgtg\", [0, 0, 0], 1).to_string() Edit Share Run Cancel .info-container {display: inline-block;}","title":"IgPgTg"}]}